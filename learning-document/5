函数式编程

    相关概念： 
        1、面向过程的程序设计（多个函数调用，将复杂业务拆分成简单业务），函数是面向过程的程序设计的基本单元；
        2、函数式编程：可以归结待面向过程程序设计，但思想跟接近数学计算，是抽象程度很高的编程范式；
        3、计算机： cpu执行的是加减乘除的指令代码，以及各种条件判断和跳转指令，所以汇编语言是最贴近计算机的语言。
        4、计算： 数学意义上的计算，越是抽象的计算，离计算硬件越远。对应到编程语言，就是越低级的语言，越贴近计算机，抽象程度低，
        执行效率高（c语言）；越高级的语言，越贴近计算，抽象程度高,执行效率低（Lisp语言）。

一、高阶函数
    说明：一个函数可以接收另一个函数作为参数，这种函数就称之为高阶函数
    1、map(fn, Iterable), 返回的结果是Iterator: 将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回
    2、reduce(fn, Iterable)，把一个函数作用在一个序列上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素
    做累计计算。
    3、filter(fn, Iterable), 把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。返回的结果
    是Iterator。
    4、sorted(Iterable, key=fn, reverse=True), 默认reverse是False,升序，True,降序

匿名函数：lambda , lambda x: x*x，只能有一个表达式，不用写return, 返回值就是该表达式的结果

装饰器； 在代码运行期间动态添加功能的方式，称为修饰器（decorator）；写法函数前加@fn；函数对象有一个_name_属性，
可以拿到函数的名字。

偏函数：Partial  例子：import functools   用：functools.partial(fn, base=2)